import { EventModel } from '../../../../../../mongodb/models/event';
import nodemailer from 'nodemailer';
import { NextResponse } from 'next/server';

const transporter = nodemailer.createTransport({
  host: 'smtp.zoho.com',
  port: 465,
  secure: true,
  auth: {
    user: process.env.EMAIL,
    pass: process.env.EMAIL_PASSWORD,
  },
});

export async function GET() {
  const today = new Date();

  const start = new Date(today.setHours(0, 0, 0, 0));
  const end = new Date(today.setHours(23, 59, 59, 999));

  try {
    const events = await EventModel.find({
      date: { $gte: start, $lte: end },
    }).populate('user');
    const sendMails = events.map((event) => {
      const user = event.user;
      if (!user?.email) return null;

      const baseStyle = `
    font-family: Arial, sans-serif;
    color: #333;
    background-color: #f9f9f9;
    padding: 20px;
    border-radius: 8px;
  `;

      let subject = '';
      let html = '';

      if (event.type === 'birthday') {
        subject = 'üéÇ –¢”©—Ä—Å”©–Ω ”©–¥—Ä–∏–π–Ω –º—ç–Ω–¥ —Ö“Ø—Ä–≥—ç–µ!';
        html = `
      <div style="${baseStyle}">
        <h2 style="color: #d63384;">üéâ –ë–∞—è—Ä —Ö“Ø—Ä–≥—ç–µ, ${user.name}!</h2>
        <p>”®–Ω”©”©–¥”©—Ä —Ç–∞–Ω—ã –æ–Ω—Ü–≥–æ–π ”©–¥”©—Ä ‚Äî <strong>—Ç”©—Ä—Å”©–Ω ”©–¥”©—Ä</strong>!</p>
        <p>TeamUp –±–∞–≥–∏–π–Ω –∑“Ø–≥—ç—ç—Å —Ç–∞–Ω–¥ —Ö–∞–º–≥–∏–π–Ω —Å–∞–π—Ö–∞–Ω –±“Ø—Ö–Ω–∏–π–≥ —Ö“Ø—Å—ç–Ω –µ—Ä”©”©–µ.</p>
        <p>üéÅ –≠—Ä“Ø“Ø–ª —ç–Ω—Ö, –∏–Ω—ç—ç–¥ —Ö”©”©—Ä, –∞–º–∂–∏–ª—Ç–∞–∞—Ä –¥“Ø“Ø—Ä—ç–Ω –±–∞–π–≥–∞–∞—Ä–∞–π!</p>
        <br/>
        <p style="font-style: italic;">‚Äî TeamUp –±–∞–≥</p>
      </div>
    `;
      } else if (event.type === 'anniversary') {
        subject = 'üéä –û–π–Ω –±–∞—è—Ä—ã–Ω –º—ç–Ω–¥ —Ö“Ø—Ä–≥—ç–µ!';
        html = `
      <div style="${baseStyle}">
        <h2 style="color: #0d6efd;">üéä –ë–∞—è—Ä —Ö“Ø—Ä–≥—ç–µ, ${user.name}!</h2>
        <p>–¢–∞ ”©–Ω”©”©–¥”©—Ä <strong>–æ–π–Ω –±–∞—è—Ä–∞–∞</strong> —Ç—ç–º–¥—ç–≥–ª—ç–∂ –±–∞–π–Ω–∞!</p>
        <br/>
        <p style="font-style: italic;">‚Äî TeamUp –±–∞–≥</p>
      </div>
    `;
      } else {
        subject = 'üéâ –ë–∞—è—Ä—ã–Ω –º—ç–Ω–¥!';
        html = `
      <div style="${baseStyle}">
        <h2>–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É, ${user.name}!</h2>
        <p>–¢–∞–Ω–¥ –±–∞—è—Ä—ã–Ω –º—ç–Ω–¥ —Ö“Ø—Ä–≥—ç–µ!</p>
        <br/>
        <p style="font-style: italic;">‚Äî TeamUp –±–∞–≥</p>
      </div>
    `;
      }

      return transporter.sendMail({
        from: `"TeamUp" <${process.env.EMAIL}>`,
        to: user.email,
        subject,
        text: `–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É ${user.name}! ${subject}`,
        html,
      });
    });

    await Promise.all(sendMails);

    return NextResponse.json({ message: 'Emails sent successfully' }, { status: 200 });
  } catch (error) {
    console.error('Email sending error:', error);
    return NextResponse.json({ error: 'Failed to send emails' }, { status: 500 });
  }
}
